// Add Mega Bezel Params & Initial Prep
//      Add Mega Bezel parameters at the beginning of the list for easy access
//      Add Color Correction
//      Calculate Average Luminance and put in alpha channel
//      Debug Drawing of the resolution & screen scaling info
shader0 = ../bezel/shaders/HyperspaceMadness/hsm-prep-initial-royale.slang
alias0  = AvgLumPass

// Linearize the input based on CRT gamma and bob interlaced fields.
// (Bobbing ensures we can immediately blur without getting artifacts.)
shader1 = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/src/crt-royale-first-pass-linearize-crt-gamma-bob-fields.slang"
alias1 = "ORIG_LINEARIZED"
filter_linear1 = "false"
scale_type1 = "source"
scale1 = "1.0"
srgb_framebuffer1 = "true"

// Resample interlaced (and misconverged) scanlines vertically.
shader2 = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/src/crt-royale-scanlines-vertical-interlacing.slang"
alias2 = "VERTICAL_SCANLINES"
filter_linear2 = "true"
scale_type_x2 = "source"
scale_x2 = "1.0"
scale_type_y2 = "viewport"
scale_y2 = "1.0"
srgb_framebuffer2 = "true"

// Do a small resize blur of ORIG_LINEARIZED at an absolute size
shader3 = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/src/crt-royale-bloom-approx.slang"
alias3 = "BLOOM_APPROX"
filter_linear3 = "true"
scale_type3 = "absolute"
scale_x3 = "400"
scale_y3 = "400"
srgb_framebuffer3 = "true"

// Blur the input for halation and refractive diffusion.
// Note: Using a one-pass 9x9 blur is about 1% slower.
shader4 = "../blurs/blur9x9.slang"
alias4 = "HALATION_BLUR"
filter_linear4 = "true"
scale_type4 = "source"
scale4 = "1.0"
srgb_framebuffer4 = "true"

// Lanczos-resize the phosphor mask vertically.
shader5 = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/src/crt-royale-mask-resize-vertical.slang"
filter_linear5 = "true"
scale_type_x5 = "absolute"
scale_x5 = "64"
scale_type_y5 = "viewport"
scale_y5 = "0.0625" // Safe for >= 341.333 horizontal triads at viewport size
#srgb_framebuffer5 = "false" // mask_texture is already assumed linear

// Lanczos-resize the phosphor mask horizontally.  scale_x6 = scale_y9.
shader6 = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/src/crt-royale-mask-resize-horizontal.slang"
alias6 = "MASK_RESIZE"
filter_linear6 = "false"
scale_type_x6 = "viewport"
scale_x6 = "0.0625"
scale_type_y6 = "source"
scale_y6 = "1.0"

// Resample (misconverged) scanlines horizontally, apply halation, and
// apply the phosphor mask.
shader7 = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/src/crt-royale-scanlines-horizontal-apply-mask.slang"
alias7 = "MASKED_SCANLINES"
filter_linear7 = "true" // This could just as easily be nearest neighbor.
scale_type7 = "viewport"
scale7 = "1.0"
srgb_framebuffer7 = "true"

// Compute a brightpass.  This will require reading the final mask.
shader8 = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/src/crt-royale-brightpass.slang"
alias8 = "BRIGHTPASS"
filter_linear8 = "true" // This could just as easily be nearest neighbor.
scale_type8 = "viewport"
scale8 = "1.0"
srgb_framebuffer8 = "true"

// Blur the brightpass vertically
shader9 = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/src/crt-royale-bloom-vertical.slang"
filter_linear9 = "true" // This could just as easily be nearest neighbor.
scale_type9 = "source"
scale9 = "1.0"
srgb_framebuffer9 = "true"

// Blur the brightpass horizontally and combine it with the dimpass:
shader10 = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/src/crt-royale-bloom-horizontal-reconstitute.slang"
filter_linear10 = "true"
scale_type10 = "source"
scale10 = "1.0"
srgb_framebuffer10 = "true"
wrap_mode10 = mirrored_repeat


// Compute curvature/AA:
// This pass CANNOT be set to floatframebuffer, if it is the output from the last pass turns black or shows garbage
// Because of this this pass outputs gamma encoded color, this is then linearized in the mega bezel reflection shader
// If we try to set it to linear here then we get banding
shader11 = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/src/hsm-crt-royale-geometry-aa-last-pass.slang"
filter_linear11 = "true"
scale_type11 = "viewport"
scale11 = 1
mipmap_input11 = "true"
wrap_mode11 = mirrored_repeat
alias11 = BR_CRTPass

// Screen Scale & Tube Scale Curvature Mapping
// Write mapping into the pass, of the 4 channels, x & y are tube warped coord and z & w are outside tube mask and edge mask
shader12 = ../bezel/shaders/HyperspaceMadness/hsm-curvature-mapping.slang
mipmap_input12 = true
filter_linear12 = true
scale_type12 = viewport
scale12 = 1
float_framebuffer12 = true
alias12 = BR_MappingPass

// Reduce Resolution  ----------------------------------------------------------------
//      Reduce the resolution to a small static size regardless of final resolution
//      Allows consistent look and faster at different final resolutions for blur
//      Mipmap option allows downscaling without artifacts
shader13 = ../bezel/shaders/HyperspaceMadness/hsm-linearize-crt.slang
mipmap_input13 = true
filter_linear13 = true
scale_type13 = absolute
float_framebuffer13 = true
// scale_x13 = 480
// scale_y13 = 270
// scale_x13 = 960
// scale_y13 = 540
scale_x13 = 800
scale_y13 = 600
wrap_mode13 = mirrored_repeat
float_framebuffer13 = true
alias13 = BR_MirrorLowResPass

// Add Blur for the Reflection (Horizontal) ----------------------------------------------------------------
shader14 = ../bezel/shaders/HyperspaceMadness/hsm-blur-outside-screen-horiz.slang
mipmap_input14 = true
filter_linear14 = true
float_framebuffer14 = true
scale_type15 = source
wrap_mode14 = mirrored_repeat

// Add Blur for the Reflection (Vertical) ----------------------------------------------------------------
shader15 = ../bezel/shaders/HyperspaceMadness/hsm-blur-outside-screen-vert.slang
filter_linear15 = false
scale_type15 = source
float_framebuffer15 = true
wrap_mode15 = mirrored_repeat
alias15 = BR_MirrorBlurredPass

// Reduce resolution ----------------------------------------------------------------
// Reduced to a very small amount so we can create a blur which will create a glow from the screen
//      Mipmap option allows smoother downscaling
shader16 = ../blurs/blur9x9.slang
mipmap_input16 = true
filter_linear16 = true
scale_type16 = absolute
float_framebuffer16 = true
scale_x16 = 128
scale_y16 = 128
wrap_mode16 = mirrored_repeat
alias16 = BR_MirrorReflectionDiffusedPass

// Add Diffused glow all around the screen ----------------------------------------------------------------
//      lurred so much that it's non directional
//      Mipmap option allows downscaling without artifacts
shader17 = ../blurs/blur9x9.slang
mipmap_input17 = true
filter_linear17 = true
scale_type17 = absolute
float_framebuffer17 = true
scale_x17 = 12
scale_y17 = 12
wrap_mode17 = mirrored_repeat
alias17 = BR_MirrorFullscreenGlowPass

// Bezel Generation & Reflection ----------------------------------------------------------------
//      Uses these previous passes:
//          BR_CRTPass
//          BR_MirrorBlurredPass
//          BR_MirrorReflectionDiffusedPass
//          BR_MirrorFullscreenGlowPass
//      Blur passes are in linearized color space, and CRT Pass already has gamma encoded in it
//
//      Uses these textures
            // BackgroundImage
            // BackgroundVertImage
            // TubeGlassImage
            // TopLayerImage
            // TopLayerVertImage

shader18 = ../bezel/shaders/HyperspaceMadness/hsm-mega-bezel-reflection.slang
mipmap_input18 = true
filter_linear18 = true
scale_type18 = viewport
float_framebuffer18 = false

// Define how many shaders will be used from this list
shaders = 19


// Define textures to be used by the different passes
textures = "mask_grille_texture_small;mask_slot_texture_small;mask_shadow_texture_small;BackgroundImage;BackgroundVertImage;TubeGlassImage;TopLayerImage;TopLayerVertImage;"

mask_grille_texture_small = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/TileableLinearApertureGrille15Wide8And5d5SpacingResizeTo64.png"
mask_grille_texture_small_wrap_mode = "repeat"
mask_grille_texture_small_linear = "true"
mask_grille_texture_small_mipmap = "false"  // Mipmapping causes artifacts with manually resized masks without tex2Dlod

mask_slot_texture_small = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/TileableLinearSlotMaskTall15Wide9And4d5Horizontal9d14VerticalSpacingResizeTo64.png"
mask_slot_texture_small_wrap_mode = "repeat"
mask_slot_texture_small_linear = "true"
mask_slot_texture_small_mipmap = "false"    // Mipmapping causes artifacts with manually resized masks without tex2Dlod

mask_shadow_texture_small = "../bezel/shaders/HyperspaceMadness/hsm-crt-royale/TileableLinearShadowMaskEDPResizeTo64.png"
mask_shadow_texture_small_wrap_mode = "repeat"
mask_shadow_texture_small_linear = "true"
mask_shadow_texture_small_mipmap = "false"  // Mipmapping causes artifacts with manually resized masks without tex2Dlod

BackgroundImage =       ../bezel/shaders/HyperspaceMadness/textures/BackgroundImage_Carbon_3840x2160.png
BackgroundVertImage =   ../bezel/shaders/HyperspaceMadness/textures/BackgroundImage_Carbon_3840x2160.png
TubeGlassImage =        ../bezel/shaders/HyperspaceMadness/textures/TubeGlassOverlayImage_3840x2160.png
TopLayerImage =         ../bezel/shaders/HyperspaceMadness/textures/TopLayerImage_Night_3840x2160.jpg
TopLayerVertImage =     ../bezel/shaders/HyperspaceMadness/textures/TopLayerImage_Night_3840x2160.jpg

parameters = "HSS_MEGA_BEZEL_DEBUG;HSS_FLIP_VIEWPORT_AND_CORE_VERTICAL;HSS_ROTATE_CORE_IMAGE;HSS_ASPECT_RATIO_ORIENTATION;HSS_ASPECT_RATIO_MODE;HSS_ASPECT_RATIO_EXPLICIT;HSS_INT_SCALE_MODE;HSS_INT_SCALE_MULTIPLE_OFFSET;HSS_INT_SCALE_MULTIPLE_OFFSET_LONG;HSS_INT_SCALE_BORDER_MIN_HEIGHT;HSS_NON_INTEGER_SCALE;HSS_SCANLINE_DIRECTION;HSS_CORE_RES_SAMPLING_MULT_SCANLINE_DIR;HSS_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR;HSS_INTERLACE_TRIGGER_RES;HSS_POSITION_OFFSET_X;HSS_POSITION_OFFSET_Y;HSS_CROP_OVERSCAN_TOP;HSS_CROP_OVERSCAN_BOTTOM;HSS_CROP_OVERSCAN_LEFT;HSS_CROP_OVERSCAN_RIGHT;HSS_CURVATURE_MODE;HSS_CURVATURE_3D_RADIUS;HSS_CURVATURE_3D_VIEW_DIST;HSS_CURVATURE_3D_TILT_ANGLE_X;HSS_CURVATURE_3D_TILT_ANGLE_Y;HSS_CURVATURE_2D_SCALE_LONG_AXIS;HSS_CURVATURE_2D_SCALE_SHORT_AXIS;HSS_COLOR_CRT_PROFILE;HSS_COLOR_SPACE;HSS_COLOR_TEMPERATURE;HSS_COLOR_SATURATION;HSS_COLOR_LUMINANCE;HSS_COLOR_BLACK_LEVEL;HSS_COLOR_NEGATIVE_CROP_BRIGHTNESS;HSS_COLOR_CRT_GAMMA;HSS_PHOSPHOR_PERSISTENCE;HSS_SCREENFX_CORNER_RADIUS;HSS_SCREENFX_EDGE_SHARPNESS;HSS_SCREENFX_VIGNETTE;HSS_SCREENFX_FAKE_SCANLINE_OPACITY;HSS_TUBE_BLACK_EDGE_THICKNESS;HSS_TUBE_CURVATURE_SCALE;HBZ_TUBE_GLASS_IMAGE_OPACITY;HBZ_TUBE_EDGE_SHADOW;HBZ_BACKGROUND_IMAGE_OPACITY;HBZ_BACKGROUND_IMAGE_SCALE_MODE;HBZ_BACKGROUND_IMAGE_ASPECT_RATIO;HBZ_BACKGROUND_IMAGE_TUBE_HEIGHT;HBZ_BACKGROUND_IMAGE_VIGNETTE_OPACITY;HBZ_BEZEL_COLOR_HUE;HBZ_BEZEL_COLOR_SATURATION;HBZ_BEZEL_COLOR_VALUE;HBZ_BEZEL_COLOR_BLEND_WITH_IMAGE;HBZ_BEZEL_NOISE;HBZ_BEZEL_OPACITY;HBZ_BEZEL_WIDTH;HBZ_BEZEL_HEIGHT;HBZ_BEZEL_INNER_CORNER_RADIUS_SCALE;HBZ_BEZEL_OUTER_CORNER_RADIUS_SCALE;HBZ_BEZEL_INNER_EDGE_THICKNESS;HBZ_BEZEL_BRIGHTNESS;HBZ_BEZEL_HIGHLIGHT;HBZ_BEZEL_GAMMA;HBZ_FRAME_OPACITY;HBZ_FRAME_THICKNESS;HBZ_FRAME_OUTER_CORNER_RADIUS;HBZ_FRAME_POS_Y_OFFSET;HBZ_FRAME_SHADOW_OPACITY;HBZ_FRAME_SHADOW_WIDTH;HBR_BLUR_NUM_SAMPLES;HBR_BLUR_MIN;HBR_BLUR_MAX;HBR_NOISE_AMOUNT;HBR_NOISE_SAMPLES;HBR_NOISE_SAMPLE_DISTANCE;HBR_GLOBAL_AMOUNT;HBR_GLOBAL_GAMMA_ADJUST;HBR_INNER_EDGE_REFLECTION;HBR_INNER_EDGE_FULLSCREEN_GLOW;HBR_DIRECT_REFLECTION;HBR_DIFFUSED_REFLECTION;HBR_FULLSCREEN_GLOW;HBR_FULLSCREEN_GLOW_GAMMA;HBR_FADE_AMOUNT;HBR_RADIAL_FADE_WIDTH;HBR_RADIAL_FADE_HEIGHT;HBR_LATERAL_OUTER_FADE_POSITION;HBR_LATERAL_OUTER_FADE_DISTANCE;HBR_CORNER_FADE;HBR_CORNER_FADE_DISTANCE;HBR_CORNER_INNER_SPREAD;HBR_CORNER_OUTER_SPREAD;HTI_TOP_IMAGE_OPACITY;HTI_TOP_IMAGE_BLEND_MODE;HTI_TOP_IMAGE_MASK_MODE;MDAPT_MODE;GTU_MODE;GTU_SIGNAL_RESOLUTION;halation_weight;diffusion_weight;bloom_underestimate_levels;bloom_excess;beam_min_sigma;beam_max_sigma;beam_spot_power;beam_min_shape;beam_max_shape;beam_shape_power;beam_horiz_filter;beam_horiz_sigma;beam_horiz_linear_rgb_weight;mask_type;mask_specify_num_triads;mask_triad_size_desired;mask_num_triads_desired;aa_cubic_c;aa_gauss_sigma;geom_overscan_x;geom_overscan_y;interlace_detect_toggle"

// HSS_MEGA_BEZEL_DEBUG = 0

// HSS_FLIP_VIEWPORT_AND_CORE_VERTICAL = 0
// HSS_ROTATE_CORE_IMAGE = 0

// HSS_ASPECT_RATIO_ORIENTATION = 0
// HSS_ASPECT_RATIO_MODE = 0
// HSS_ASPECT_RATIO_EXPLICIT = 1.3333
// HSS_CORE_RES_SAMPLING_MULT_SCANLINE_DIR = 1
// HSS_CORE_RES_SAMPLING_MULT_OPPOSITE_DIR = 1

// HSS_INT_SCALE_MODE = 0
// HSS_INT_SCALE_MULTIPLE_OFFSET = 0
// HSS_INT_SCALE_MULTIPLE_OFFSET_LONG = 0
// HSS_INT_SCALE_BORDER_MIN_HEIGHT = 5.5
// HSS_NON_INTEGER_SCALE = 82.97
// HSS_SNAP_TO_INT_SCALE_TOLERANCE = 0.1

// HSS_SCANLINE_DIRECTION = 0
// HSS_INTERLACE_TRIGGER_RES = 600

// HSS_CROP_OVERSCAN_TOP = 0
// HSS_CROP_OVERSCAN_BOTTOM = 0
// HSS_CROP_OVERSCAN_LEFT = 0
// HSS_CROP_OVERSCAN_RIGHT = 0

// HSS_POSITION_OFFSET_X = 0
// HSS_POSITION_OFFSET_Y = 0

// HSS_CURVATURE_MODE = 0
// HSS_CURVATURE_3D_RADIUS = 2
// HSS_CURVATURE_3D_VIEW_DIST = 2
// HSS_CURVATURE_3D_TILT_ANGLE_X = 0
// HSS_CURVATURE_3D_TILT_ANGLE_Y = 0
// HSS_CURVATURE_2D_SCALE_LONG_AXIS = 1
// HSS_CURVATURE_2D_SCALE_SHORT_AXIS = 1

HSS_COLOR_CRT_PROFILE = 3
// HSS_COLOR_SPACE = 0
// HSS_COLOR_TEMPERATURE = -50
// HSS_COLOR_SATURATION = 1
// HSS_COLOR_LUMINANCE = 100
// HSS_COLOR_BLACK_LEVEL = -0.1
// HSS_COLOR_NEGATIVE_CROP_BRIGHTNESS = 0.05
// HSS_COLOR_CRT_GAMMA = 2.4

// HSS_PHOSPHOR_PERSISTENCE = 0

// HSS_SCREENFX_CORNER_RADIUS = 10
// HSS_SCREENFX_EDGE_SHARPNESS = 0.4
// HSS_SCREENFX_VIGNETTE = 0
// HSS_SCREENFX_FAKE_SCANLINE_OPACITY = 0.7

// HSS_TUBE_BLACK_EDGE_THICKNESS = 1.2
// HSS_TUBE_CURVATURE_SCALE = 1
// HBZ_TUBE_GLASS_IMAGE_OPACITY = 1.4
// HBZ_TUBE_EDGE_SHADOW = 0.7

// HBZ_BACKGROUND_IMAGE_VIGNETTE_OPACITY = 0.5

// HBZ_BEZEL_COLOR_HUE = 0
// HBZ_BEZEL_COLOR_SATURATION = 0
// HBZ_BEZEL_COLOR_VALUE = 10
// HBZ_BEZEL_COLOR_BLEND_WITH_IMAGE = 0
// HBZ_BEZEL_NOISE = 30
// HBZ_BEZEL_OPACITY = 1
// HBZ_BEZEL_WIDTH = 6.5
// HBZ_BEZEL_HEIGHT = 5
// HBZ_BEZEL_INNER_CORNER_RADIUS_SCALE = 0.5
// HBZ_BEZEL_OUTER_CORNER_RADIUS_SCALE = 1
// HBZ_BEZEL_INNER_EDGE_THICKNESS = 0.5
// HBZ_BEZEL_BRIGHTNESS = 40
// HBZ_BEZEL_HIGHLIGHT = 1
// HBZ_BEZEL_GAMMA = 1

// HBZ_FRAME_OPACITY = 1
// HBZ_FRAME_THICKNESS = 8
// HBZ_FRAME_OUTER_CORNER_RADIUS = 5
// HBZ_FRAME_POS_Y_OFFSET = 0
// HBZ_FRAME_SHADOW_OPACITY = 1
// HBZ_FRAME_SHADOW_WIDTH = 10

// HBR_BLUR_NUM_SAMPLES = 20
// HBR_BLUR_MIN = 0
// HBR_BLUR_MAX = 0.95

// HBR_NOISE_AMOUNT = 0.5
// HBR_NOISE_SAMPLES = 1
// HBR_NOISE_SAMPLE_DISTANCE = 0.2

// HBR_GLOBAL_AMOUNT = 0.4
// HBR_GLOBAL_GAMMA_ADJUST = 1.2
// HBR_INNER_EDGE_REFLECTION = 0.7
// HBR_INNER_EDGE_FULLSCREEN_GLOW = 0.4
// HBR_DIRECT_REFLECTION = 1.5
// HBR_DIFFUSED_REFLECTION = 0.5
// HBR_FULLSCREEN_GLOW = 75
// HBR_FULLSCREEN_GLOW_GAMMA = 3

// HBR_FADE_AMOUNT = 1

// HBR_RADIAL_FADE_WIDTH = 70
// HBR_RADIAL_FADE_HEIGHT = 100

// HBR_LATERAL_OUTER_FADE_POSITION = -18
// HBR_LATERAL_OUTER_FADE_DISTANCE = 20

// HBR_CORNER_FADE = 10
// HBR_CORNER_FADE_DISTANCE = 100
// HBR_CORNER_INNER_SPREAD = 500
// HBR_CORNER_OUTER_SPREAD = 160

// HTI_TOP_IMAGE_OPACITY = 0
// HTI_TOP_IMAGE_BLEND_MODE = 5
// HTI_TOP_IMAGE_MASK_MODE = 2

// MDAPT_MODE = 1

// GTU_MODE = 0
// GTU_SIGNAL_RESOLUTION = 256

// HSS_SCALEFX_ON = 0

// halation_weight = 0
// diffusion_weight = 0.075
// bloom_underestimate_levels = 0.8
// bloom_excess = 0
// beam_min_sigma = 0.02
// beam_max_sigma = 0.3
// beam_spot_power = 0.33
// beam_min_shape = 2
// beam_max_shape = 4
// beam_shape_power = 0.25
// beam_horiz_filter = 0
// beam_horiz_sigma = 0.35
// beam_horiz_linear_rgb_weight = 1
// mask_type = 1
// mask_specify_num_triads = 0
// mask_triad_size_desired = 3
// mask_num_triads_desired = 480
// aa_cubic_c = 0.5
// aa_gauss_sigma = 0.5
// geom_overscan_x = 1
// geom_overscan_y = 1
// interlace_detect_toggle = 0